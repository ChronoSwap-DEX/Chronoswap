/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
} from "@alephium/web3";
import { default as ChronexPresaleContractJson } from "../chronex/ChronexPresale.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace ChronexPresaleTypes {
  export type Fields = {
    chronexToken: HexString;
    tokensForSale: bigint;
    alphPerToken: bigint;
    saleOpen: boolean;
    tokensSold: bigint;
    owner_: Address;
  };

  export type State = ContractState<Fields>;

  export interface CallMethodTable {
    getChronexTokenId: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    getTokensLeft: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getAlphPerToken: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getSaleOpen: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<boolean>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
}

class Factory extends ContractFactory<
  ChronexPresaleInstance,
  ChronexPresaleTypes.Fields
> {
  getInitialFieldsWithDefaultValues() {
    return this.contract.getInitialFieldsWithDefaultValues() as ChronexPresaleTypes.Fields;
  }

  consts = {
    PermissionsErrorCodes: { Forbidden: BigInt(0) },
    ErrorCodes: { SaleNotOpen: BigInt(0), NotEnoughTokens: BigInt(1) },
  };

  at(address: string): ChronexPresaleInstance {
    return new ChronexPresaleInstance(address);
  }

  tests = {
    onlyOwner: async (
      params: TestContractParams<
        ChronexPresaleTypes.Fields,
        { caller: Address }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "onlyOwner", params);
    },
    changeOwner: async (
      params: TestContractParams<
        ChronexPresaleTypes.Fields,
        { newOwner: Address }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "changeOwner", params);
    },
    getChronexTokenId: async (
      params: Omit<
        TestContractParams<ChronexPresaleTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<HexString>> => {
      return testMethod(this, "getChronexTokenId", params);
    },
    getTokensLeft: async (
      params: Omit<
        TestContractParams<ChronexPresaleTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "getTokensLeft", params);
    },
    getAlphPerToken: async (
      params: Omit<
        TestContractParams<ChronexPresaleTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "getAlphPerToken", params);
    },
    getSaleOpen: async (
      params: Omit<
        TestContractParams<ChronexPresaleTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<boolean>> => {
      return testMethod(this, "getSaleOpen", params);
    },
    depositChronex: async (
      params: TestContractParams<ChronexPresaleTypes.Fields, { amount: bigint }>
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "depositChronex", params);
    },
    setSaleOpen: async (
      params: TestContractParams<ChronexPresaleTypes.Fields, { open: boolean }>
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "setSaleOpen", params);
    },
    setAlphPerToken: async (
      params: TestContractParams<ChronexPresaleTypes.Fields, { apt: bigint }>
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "setAlphPerToken", params);
    },
    buy: async (
      params: TestContractParams<ChronexPresaleTypes.Fields, { amount: bigint }>
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "buy", params);
    },
    withdrawToken_: async (
      params: TestContractParams<
        ChronexPresaleTypes.Fields,
        { caller: Address; tokenId: HexString; amount: bigint; sendTo: Address }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "withdrawToken_", params);
    },
    withdrawAlph: async (
      params: TestContractParams<
        ChronexPresaleTypes.Fields,
        { amount: bigint; sendTo: Address }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "withdrawAlph", params);
    },
    withdrawChronex: async (
      params: TestContractParams<
        ChronexPresaleTypes.Fields,
        { amount: bigint; sendTo: Address }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "withdrawChronex", params);
    },
    destroy: async (
      params: TestContractParams<
        ChronexPresaleTypes.Fields,
        { remainingBalancesTo: Address }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "destroy", params);
    },
    upgrade: async (
      params: TestContractParams<
        ChronexPresaleTypes.Fields,
        { newBytecode: HexString }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "upgrade", params);
    },
  };
}

// Use this object to test and deploy the contract
export const ChronexPresale = new Factory(
  Contract.fromJson(
    ChronexPresaleContractJson,
    "",
    "92841263091066e79f85e643a434e97b5418f9734945bf3bab689130afc3a749"
  )
);

// Use this class to interact with the blockchain
export class ChronexPresaleInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<ChronexPresaleTypes.State> {
    return fetchContractState(ChronexPresale, this);
  }

  methods = {
    getChronexTokenId: async (
      params?: ChronexPresaleTypes.CallMethodParams<"getChronexTokenId">
    ): Promise<ChronexPresaleTypes.CallMethodResult<"getChronexTokenId">> => {
      return callMethod(
        ChronexPresale,
        this,
        "getChronexTokenId",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getTokensLeft: async (
      params?: ChronexPresaleTypes.CallMethodParams<"getTokensLeft">
    ): Promise<ChronexPresaleTypes.CallMethodResult<"getTokensLeft">> => {
      return callMethod(
        ChronexPresale,
        this,
        "getTokensLeft",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getAlphPerToken: async (
      params?: ChronexPresaleTypes.CallMethodParams<"getAlphPerToken">
    ): Promise<ChronexPresaleTypes.CallMethodResult<"getAlphPerToken">> => {
      return callMethod(
        ChronexPresale,
        this,
        "getAlphPerToken",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getSaleOpen: async (
      params?: ChronexPresaleTypes.CallMethodParams<"getSaleOpen">
    ): Promise<ChronexPresaleTypes.CallMethodResult<"getSaleOpen">> => {
      return callMethod(
        ChronexPresale,
        this,
        "getSaleOpen",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
  };

  async multicall<Calls extends ChronexPresaleTypes.MultiCallParams>(
    calls: Calls
  ): Promise<ChronexPresaleTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      ChronexPresale,
      this,
      calls,
      getContractByCodeHash
    )) as ChronexPresaleTypes.MultiCallResults<Calls>;
  }
}
